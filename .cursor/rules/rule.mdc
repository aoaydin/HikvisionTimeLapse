---
alwaysApply: true
---
# Hikvision Time-Lapse Camera Application - Cursor Rule

meta:
  title: "Time-Lapse Kamera ve Video Otomasyonu"
  description: |
    Hikvision destekli bir IP kameradan belirli saatlerde otomatik fotoğraf çekip, biriktirilen fotoğraflardan time-lapse video üreten ve Windows Forms arayüze sahip, başlat/durdur kontrollü, kullanıcı dostu bir uygulama geliştirme kural dosyası.

steps:

  # 1. Proje Kurulumu ve Bağımlılıklar
  - name: Proje Kurulumu
    description: |
      Yeni bir C# Windows Forms projesi başlat. Proje adını "HikvisionTimeLapse" olarak belirle.
      Aşağıdaki NuGet paketlerini projeye ekle:
        - OpenCvSharp4 (video ve resim işleme)
        - OpenCvSharp4.Windows
        - System.Drawing.Common
        - NLog (loglama için)
        - Newtonsoft.Json (ayar ve log dosyaları için)
        - Quartz (zamanlama için, alternatif: Timer)

  # 2. Temel Arayüz Tasarımı
  - name: Arayüz Geliştirme
    description: |
      Form ana ekranda şu bileşenler olacak:
        - Başlat (Start) butonu
        - Durdur (Stop) butonu
        - Zamanlayıcı/Planlayıcı aktiflik göstergesi (Label veya renkli icon)
        - Kamera Ayarları butonu (IP, kullanıcı adı, şifre girişi için yeni bir form açacak)
        - Fotoğraf klasörü göstergesi (son fotoğraf yolu/kaç resim çekildi)
        - Time-lapse video oluştur butonu
        - Log ekranı (TextBox veya ListBox)
        - Program Durumu göstergesi (Başlatıldı/Durduruldu/Video oluşturuluyor vs.)

  # 3. Kamera Ayar Ekranı ve Ayarların Kaydı
  - name: Kamera Ayarları
    description: |
      Ayar formunda:
        - Kamera IP/Hostname (ör: rtsp://192.168.20.209:554/Streaming/Channels/101)
        - Kullanıcı adı
        - Şifre
        - Test Et (RTSP bağlantısı kontrolü yapacak)
        - Kaydet/İptal butonları
      Ayarları JSON dosyasına kaydet, uygulama açılışında otomatik oku.

  # 4. Zamanlayıcı/Planlayıcı Sistemi
  - name: Zamanlanmış Fotoğraf Çekimi
    description: |
      Quartz (veya System.Threading.Timer) kullanarak, her gün 10:00, 13:00, 16:30 saatlerinde otomatik fotoğraf çekimi planla.
      Fotoğraf çekimi için:
        - RTSP bağlantısı ile tek kare yakala.
        - Fotoğrafı şu dizine kaydet: photos/YYYY-MM-DD/HH-MM-SS.jpg
        - Çekim başarılıysa logla ve UI'da göster.
        - Hata varsa kırmızı log ve UI uyarısı.

  # 5. Fotoğraf Çekim ve Kayıt Modülü
  - name: Kamera Fotoğraf Çekme Modülü
    description: |
      RTSP üzerinden, tek kare (snapshot) alabilen bir fonksiyon yaz.
      Gerekirse ffmpeg veya OpenCvSharp kullan.
      Çekilen görseli tarihe göre isimlendir, klasör yapısına dikkat et.
      Her çekimde işlemi logla, başarısızlık varsa tekrar deneme (3 deneme) uygula.
      Kamera bağlantısı yoksa veya timeout olursa uygun hata göster.

  # 6. Time-lapse Video Oluşturma Modülü
  - name: Time-lapse Video Oluşturma
    description: |
      Kullanıcı butona bastığında, 'photos/' klasöründeki Tüm fotoğrafları çekim zamanına göre sırala.
      OpenCvSharp ile bunları mp4 formatında birleştir:
        - Video adı: output/timelapse_{start_date}_to_{end_date}.mp4
        - Kare hızı (fps) ve çözünürlük kullanıcıya ayarlanabilir şekilde (varsayılan: 25fps, 1920x1080)
      İşlem sırasında progress bar ve log göster.
      Video tamamlanınca kullanıcıya bildir.

  # 7. Loglama ve Hata Yönetimi
  - name: Log ve Hata Yönetimi
    description: |
      Tüm önemli işlemleri (başlat, durdur, foto çek, video oluştur, hata) hem ekranda hem de log dosyasına yaz.
      Hataları kullanıcı dostu ve teknik olarak anlamlı şekilde göster.

  # 8. Otomatik ve Manuel Testler
  - name: Otomatik ve Manuel Test Süreci
    description: |
      Tüm fonksiyonlar için otomatik testler yaz:
        - Kamera bağlantısı test edilince başarılı/başarısız sonucu doğrula.
        - Planlanmış çekimler belirtilen saatlerde çalışıyor mu kontrol et.
        - Fotoğraf kaydı başarılı mı doğrula.
        - Video oluşturma başarılı mı, çıktı dosyasının oynatılabildiğini kontrol et.
      Manuel olarak da testler için UI üzerinden kolaylaştırıcı test butonları ekle (ör: 'Şimdi Test Et').

  # 9. Program Sonlandırma ve Temizlik
  - name: Program Sonlandırma
    description: |
      Program 'Durdur' butonuna tıklanınca zamanlayıcıları temizle, bağlantıları kapat, tüm işlemleri logla.
      Çıkışta ayarları kaydet, log dosyalarını arşivle.

  # 10. Tamamlanma ve Son Doğrulama
  - name: Son Doğrulama ve Tamamlama
    description: |
      Program tüm temel fonksiyonları ile eksiksiz çalışıyorsa ve testler geçtiyse,
      kullanıcıya büyük bir bildirim ile "Tüm fonksiyonlar başarıyla test edildi, program tamamlandı!" mesajı göster.

checklist:
  - [ ] Proje ve NuGet bağımlılıkları kuruldu.
  - [ ] Temel arayüz tasarımı tamamlandı.
  - [ ] Kamera ayar ekranı hazır ve json ayar dosyası çalışıyor.
  - [ ] Planlayıcı ve zamanlanmış fotoğraf çekimi sorunsuz işliyor.
  - [ ] Fotoğraf çekme ve kayıt modülü doğru çalışıyor.
  - [ ] Time-lapse video oluşturma başarıyla çalışıyor.
  - [ ] Log ve hata yönetimi tüm adımlarda aktif.
  - [ ] Otomatik/manuel testler yazıldı ve geçti.
  - [ ] Program başlat/durdur mekanizması stabil çalışıyor.
  - [ ] Tamamlandı bildirimi ile tüm süreç doğrulandı.

notes:
  - Her modül adım adım ve test edilerek ilerleyecek. Eksik/hatalı adımda geriye dönülüp tekrar test yapılacak.
  - RTSP kamera bağlantısı için gerekirse test IP'si, demo video veya lokal video akışı kullanılabilir.
  - Time-lapse video oluşturma için donanım gücüne göre çok fazla fotoğraf olursa uyarı gösterilmeli.
  - Testler otomatikleştirilmiş şekilde, gerekirse log dosyası üzerinden de kontrol edilecek.

# End of Cursor Rule
